package de.uni_freiburg.informatik.ultimate.lib.srparse;

import java.io.IOException;
import java.io.FileReader;
import java.util.Vector;
import com.github.jhoenicke.javacup.runtime.Symbol;

import de.uni_freiburg.informatik.ultimate.lib.pea.CDD;
import de.uni_freiburg.informatik.ultimate.lib.pea.BooleanDecision;


parser ReqParser;
option symbols = ReqSymbols;
option java15, compact_red, newpositions;

parser code {:
	String filename;
	Symbol lookahead;
	String error;
	
	public ReqParser(String filename) throws IOException {
		this(new ReqLexer(new FileReader(filename)));
		setFileName(filename);
	}

	public void setFileName(String filename) {
		this.filename = filename;
	}
	
	public void report_error(String s, Object sym) {
		String location;
		if (sym instanceof MySymbolFactory.LineColumnSymbol) {
			MySymbolFactory.LineColumnSymbol bsym = (MySymbolFactory.LineColumnSymbol) sym;
			location = bsym.getLocation();
	    } else if ((sym instanceof Symbol) 
	    	       && ((Symbol)sym).sym == ReqSymbols.EOF) {
	    	location = "EOF";
	    } else
	        location = "UNKNOWN";
	    
	    error = filename+":"+location+": "+s;
	}

	public void report_error(String s) {	
		report_error(s, cur_token);
	}
	
	public void syntax_error(Symbol sym) {
	    report_error("Syntax Error", sym);
		System.err.println(error);
		error = null;
	}

	public Symbol nextToken() throws Exception {
		Symbol token = lookahead != null ? lookahead : 
			getScanner().next_token();
		lookahead = null;
		if (token.sym == ReqSymbols.DOT) {
			lookahead = getScanner().next_token();
			if (lookahead.sym == ReqSymbols.ID) {
				token.sym = ReqSymbols.IDDOT;
			}
		}
		return token;
	}
:}

action code {:
    public String rename(String s) {
        return s;
    }
    
    @SuppressWarnings("unchecked") 
    public<E> Vector<E> buildVec(E... vec) {
    	Vector<E> result = new Vector<E>();
    	for (E v: vec) {
    	  result.add(v);
    	}
    	return result;
    }
:}

/*init with {: getScanner().init(); :} */
scan with {: return nextToken(); :}


/* Keywords */
terminal GLOBALLY, BEFORE, AFTER, BETWEEN, AND, UNTIL;
terminal IT, IS, NEVER, ALWAYS, THE, CASE, THAT;
terminal IF, HOLD, HOLDS, HELD, EVENTUALLY;
terminal TRANSITIONS, TO, STATES, IN, WHICH, OCCUR, AT, TWICE;
terminal THEN, PREVIOUSLY, AS, WELL;
terminal WAS, PRECEDED, SUCCEEDED, BY;
terminal WHERE, DOES, NOT;
terminal ONCE, BECOMES, SATISFIED, FOR, EVERY;
terminal MOST, LEAST, LESS, THAN;
terminal TIME, UNITS, SEC, USEC, MSEC;
terminal THERE, ONE, EXECUTION, SEQUENCE, SUCH;
/* Other Symbols */
terminal IDDOT, DOT, COMMA, COLON, SEMI;
terminal LAND, LOR, LNOT;
terminal LPAR, RPAR, QUOTE;
terminal String BINOP;
terminal String ID;
terminal Integer NUMBER;

/* Non-terminals */
non terminal CDD expression, expr;
non terminal String atom, cid;
non terminal srParsePattern property;
non terminal srParsePattern pattern, orderpattern, realtimepattern;
non terminal srParseScope scope;
non terminal srParsePattern[] patternset;
non terminal Integer duration, num;

precedence left LOR;
precedence left LAND;
precedence nonassoc LNOT;

/* The grammar */

patternset ::=
	property*:set {: RESULT = set; :}
	;

property ::= scope:s COMMA? pattern:p DOT?
             {: p.setScope(s); RESULT = p; :}
           | error
             {: RESULT = null; :}
           ;

scope ::=
    GLOBALLY
      {: RESULT = new srParseScopeGlob(); :}
  | BEFORE expression:p
      {: RESULT = new srParseScopeBefore(p); :}
  | AFTER expression:p
      {: RESULT = new srParseScopeAfter(p, null); :}
  | BETWEEN expression:p AND expression:q 
      {: RESULT = new srParseScopeBetween(p,q); :}
  | AFTER expression:p UNTIL expression:q
      {: RESULT = new srParseScopeAfter(p,q); :}
  ;
  
pattern ::=
    /* qualitative - occurrence */
    IT IS NEVER THE CASE THAT expression:p HOLDS
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new InstAbsPattern());
         RESULT.mergeCDDs(buildVec(p));
      :}
  | IT IS ALWAYS THE CASE THAT expression:p HOLDS
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new UniversalityPattern());
         RESULT.mergeCDDs(buildVec(p));
      :}
  | IT IS ALWAYS THE CASE THAT IF expression:p HOLDS COMMA? THEN expression:q HOLDS AS WELL
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new InvariantPattern());
         RESULT.mergeCDDs(buildVec(q,p));
      :}
/* which PatternType should I use for this????
  | expression:p EVENTUALLY HOLDS
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new ());
         RESULT.mergeCDDs(buildVec(p));
      :}
*/
  | TRANSITIONS TO STATES IN WHICH expression:p HOLDS OCCUR AT MOST TWICE
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new BndExistencePattern());
         RESULT.mergeCDDs(buildVec(p));
      :}
    /* qualitative - order */
  | IT IS ALWAYS THE CASE THAT orderpattern:p {: RESULT=p; :}
    /* real time */
  | IT IS ALWAYS THE CASE THAT realtimepattern:p {: RESULT=p; :}
  ;
  
orderpattern ::=
    IF expression:p HOLDS COMMA? THEN expression:q PREVIOUSLY HELD
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new PrecedencePattern());
         RESULT.mergeCDDs(buildVec(q,p));
      :}
  | IF expression:p HOLDS AND IS SUCCEEDED BY expression:q COMMA? THEN expression:r PREVIOUSLY HELD
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new PrecedenceChain12Pattern());
         RESULT.mergeCDDs(buildVec(r,q,p));
      :}
  | IF expression:p HOLDS COMMA? THEN expression:q PREVIOUSLY HELD AND WAS PRECEDED BY expression:r
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new PrecedenceChain21Pattern());
         RESULT.mergeCDDs(buildVec(r,q,p));
      :}
  | IF expression:p HOLDS COMMA? THEN expression:q EVENTUALLY HOLDS
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new ResponsePattern());
         RESULT.mergeCDDs(buildVec(q,p));
      :}
  | IF expression:p HOLDS COMMA? THEN expression:q EVENTUALLY HOLDS AND IS SUCCEEDED BY expression:r
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new ResponseChain12Pattern());
         RESULT.mergeCDDs(buildVec(r,q,p));
      :}
  | IF expression:p HOLDS AND IS SUCCEEDED BY expression:q COMMA? THEN expression:r EVENTUALLY HOLDS AFTER expression:s
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new ResponseChain21Pattern());
         RESULT.mergeCDDs(buildVec(s,r,q,p));
      :}
  | IF expression:p HOLDS COMMA? THEN expression:q EVENTUALLY HOLDS AND IS SUCCEEDED BY expression:r WHERE expression:s DOES NOT HOLD BETWEEN expression:t AND expression:u
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new ConstrainedChainPattern());
         RESULT.mergeCDDs(buildVec(u,s,t,r,q,p));
      :}
  ;
  
realtimepattern ::=
    ONCE expression:p BECOMES SATISFIED COMMA? IT HOLDS FOR AT LEAST duration:d
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new MinDurationPattern());
         RESULT.mergeCDDs(buildVec(p));
         RESULT.setDuration(d);
      :}
  | ONCE expression:p BECOMES SATISFIED COMMA? IT HOLDS FOR LESS THAN duration:d
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new MaxDurationPattern());
         RESULT.mergeCDDs(buildVec(p));
         RESULT.setDuration(d);
      :}
  | expression:p HOLDS AT LEAST EVERY duration:d
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new BndReccurrencePattern());
         RESULT.mergeCDDs(buildVec(p));
         RESULT.setDuration(d);
      :}
  | IF expression:p HOLDS COMMA? THEN expression:s HOLDS AFTER AT MOST duration:d
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new BndResponsePattern());
         RESULT.mergeCDDs(buildVec(s, p));
         RESULT.setDuration(d);
      :}
  | IF expression:p HOLDS COMMA? THEN expression:s HOLDS FOR AT LEAST duration:d
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new BndInvariancePattern());
         RESULT.mergeCDDs(buildVec(s, p));
         RESULT.setDuration(d);
      :}
  | IF expression:p HOLDS COMMA? THEN THERE IS AT LEAST ONE EXECUTION SEQUENCE SUCH THAT expression:q HOLDS FOR AT LEAST duration:d
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new BndPossInvariancePattern());
         RESULT.mergeCDDs(buildVec(q, p));
         RESULT.setDuration(d);
      :}
  | IF expression:p HOLDS COMMA? THEN THERE IS AT LEAST ONE EXECUTION SEQUENCE SUCH THAT expression:q HOLDS AFTER AT MOST duration:d
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new BndPossResponsePattern());
         RESULT.mergeCDDs(buildVec(q, p));
         RESULT.setDuration(d);
      :}
  | AFTER expression:p HOLDS FOR duration:d COMMA? THEN expression:q HOLDS
      {: RESULT = new srParsePattern();
         RESULT.setPattern(RESULT.new BndEntryConditionPattern());
	 RESULT.mergeCDDs(buildVec(q, p));
	 RESULT.setDuration(d);
      :}
  ;

expression ::= QUOTE expr:e QUOTE {: RESULT = e; :}
             | expr;
expr ::= LPAR expr:e RPAR {: RESULT = e; :}
       | expr:e1 LAND expr:e2 {: RESULT = e1.and(e2); :}
       | expr:e1 LOR  expr:e2 {: RESULT = e1.or(e2); :}
       | LNOT expr:e {: RESULT = e.negate(); :}
       | atom:a {: RESULT = BooleanDecision.create(rename(a)); :}
       ;
       
atom ::= cid:lhs BINOP:op cid:rhs {: RESULT = lhs + op + rhs; :}
       | cid:lhs BINOP:op NUMBER:rhs {: RESULT = lhs + op + rhs; :}
       | cid
       ;
       
cid ::= ID
      | cid:c IDDOT ID:id {: RESULT= c + "." + id; :}
      ;

duration ::= num:n TIME UNITS {: RESULT = n; :}
           | num:n USEC {: RESULT = n; :}
           | num:n MSEC {: RESULT = n*1000; :}
           | num:n SEC {: RESULT = n*1000000; :}
           ;
           
num ::= NUMBER
      | QUOTE NUMBER:n QUOTE {: RESULT = n; :};