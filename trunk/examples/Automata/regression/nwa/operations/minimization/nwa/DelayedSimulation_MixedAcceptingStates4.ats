// Author: Christian Schilling
// Date: 2017-02-07
// 
// Simplified version of DelayedSimulation_MixedAcceptingStates2.ats

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatSize = numberOfStates(minimizeNwaPmaxSat(preprocessed));
int minimizeNwaPmaxSatAsymmetricSize = numberOfStates(minimizeNwaPmaxSatAsymmetric(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed)); // TODO the result is wrong
int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed)); // TODO the result is wrong
int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed)); // TODO the result is wrong

assert(minimizeSevpaSize == 5);
assert(shrinkNwaSize == 5);
assert(minimizeNwaPmaxSatSize == 5);
assert(minimizeNwaPmaxSatAsymmetricSize == 5);
assert(reduceNwaDirectSimulationSize == 5);
assert(reduceNwaDirectSimulationBSize == 5);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 5);
// assert(reduceNwaDelayedSimulationSize == 4); // TODO correct after fixing the method
// assert(reduceNwaDelayedSimulationBSize == 4); // TODO correct after fixing the method
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 4); // TODO correct after fixing the method

NestedWordAutomaton nwa = (
	callAlphabet = {c},
	internalAlphabet = {a b},
	returnAlphabet = {r},
	states = {q0 q1 q2 p2 qf},
	initialStates = {q0},
	finalStates = {p2 qf},
	callTransitions = {
		(q0 c q1)
	},
	internalTransitions = {
		(q1 a p2)
		(q1 b q2)
		(p2 a qf)
		(q2 a qf)
		(qf a qf)
	},
	returnTransitions = {
		(q2 q0 r q0)
		(p2 q0 r q0)
	}
);
