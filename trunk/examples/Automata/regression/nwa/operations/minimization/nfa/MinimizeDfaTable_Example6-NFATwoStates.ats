// Date: 2014-09-12

NestedWordAutomaton preprocessed = removeUnreachable(nwa);

int minimizeSevpaSize = numberOfStates(minimizeSevpa(preprocessed));
int shrinkNwaSize = numberOfStates(shrinkNwa(preprocessed));
int minimizeNwaPmaxSatSize = numberOfStates(minimizeNwaPmaxSat(preprocessed));
int minimizeNwaPmaxSatAsymmetricSize = numberOfStates(minimizeNwaPmaxSatAsymmetric(preprocessed));
int minimizeDfaSimulationSize = numberOfStates(minimizeDfaSimulation(preprocessed));
int reduceNwaDirectSimulationSize = numberOfStates(reduceNwaDirectSimulation(preprocessed));
int reduceNwaDirectSimulationBSize = numberOfStates(reduceNwaDirectSimulationB(preprocessed));
int reduceNwaDirectFullMultipebbleSimulationSize = numberOfStates(reduceNwaDirectFullMultipebbleSimulation(preprocessed));
int buchiReduceSize = numberOfStates(buchiReduce(preprocessed));
int reduceNwaDelayedSimulationSize = numberOfStates(reduceNwaDelayedSimulation(preprocessed));
int reduceNwaDelayedSimulationBSize = numberOfStates(reduceNwaDelayedSimulationB(preprocessed));
// int reduceNwaDelayedFullMultipebbleSimulationSize = numberOfStates(reduceNwaDelayedFullMultipebbleSimulation(preprocessed));
int reduceBuchiFairDirectSimulationSize = numberOfStates(reduceBuchiFairDirectSimulation(preprocessed));
int reduceBuchiFairSimulationSize = numberOfStates(reduceBuchiFairSimulation(preprocessed));

assert(minimizeSevpaSize == 1);
assert(shrinkNwaSize == 1);
assert(minimizeNwaPmaxSatSize == 1);
assert(minimizeNwaPmaxSatAsymmetricSize == 1);
assert(minimizeDfaSimulationSize == 1);
assert(reduceNwaDirectSimulationSize == 1);
assert(reduceNwaDirectSimulationBSize == 1);
assert(reduceNwaDirectFullMultipebbleSimulationSize == 1);
assert(buchiReduceSize == 1);
assert(reduceNwaDelayedSimulationSize == 1);
assert(reduceNwaDelayedSimulationBSize == 1);
// assert(reduceNwaDelayedFullMultipebbleSimulationSize == 1);
assert(reduceBuchiFairDirectSimulationSize == 1);
assert(reduceBuchiFairSimulationSize == 1);

NestedWordAutomaton nwa = (
  callAlphabet = { },
  internalAlphabet = {a b},
  returnAlphabet = { },
  states = {q0 q1},
  initialStates = {q0},
  finalStates = {q0 q1},
  callTransitions = {},
  internalTransitions = {
      (q0 a q1)
      (q1 a q0)
  }, 
  returnTransitions = {}
);
