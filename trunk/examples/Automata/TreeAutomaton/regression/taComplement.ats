
TreeAutomaton taIntList = (
    alphabet = { nil "0" cons succ },
    states = { Num List "_" },
    initialStates = { "_" },
    finalStates = { List },
    transitionTable = {
        ((Num) succ Num)
        (("_") "0" Num)
        ((Num List) cons List)
        (("_") nil List)
    }
);


TreeAutomaton taEvenIntList = (
    alphabet = { nil "0" cons succ },
    states = { OddNum EvenNum List "_" },
    initialStates = { "_" },
    finalStates = { List },
    transitionTable = {
        ((OddNum) succ EvenNum)
        ((EvenNum) succ OddNum)
        (("_") "0" EvenNum)
        ((EvenNum List) cons List)
        (("_") nil List)
    }
);


TreeAutomaton taMul3IntList = (
    alphabet = { nil "0" cons succ },
    states = { mod1 mod2 mod0 List "_" },
    initialStates = { "_" },
    finalStates = { List },
    transitionTable = {
        ((mod2) succ mod0)
        ((mod1) succ mod2)
        ((mod0) succ mod1)
        (("_") "0" mod0)
        ((mod0 List) cons List)
        (("_") nil List)
    }
);

// [[]]
Tree list0 = Tree [cons(nil,nil)];
// [2, 1]
Tree listA = Tree [cons(succ(succ("0")),cons(succ("0"),nil))];
// [2, 0]
Tree listB = Tree [cons(succ(succ("0")),cons("0",nil))];
// [2, 4]
Tree listC = Tree [cons(succ(succ("0")),cons(succ(succ(succ(succ("0")))),nil))];
// [3, 0]
Tree listD = Tree [cons(succ(succ(succ("0"))),cons("0",nil))];
// [6, 12]
Tree listE = Tree [cons(succ(succ(succ(succ(succ(succ("0")))))),cons(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ("0")))))))))))),nil))];


// Not lists of integers
assert(Accepts(Complement(taIntList), list0));
assert(Accepts(Complement(taEvenIntList), list0));
assert(Accepts(Complement(taMul3IntList), list0));

// taIntList accepts all integer lists
assert(!Accepts(Complement(taIntList), listA));
assert(!Accepts(Complement(taIntList), listB));
assert(!Accepts(Complement(taIntList), listC));
assert(!Accepts(Complement(taIntList), listD));
assert(!Accepts(Complement(taIntList), listE));

// taEvenList accepts only lists of even numbers
assert(Accepts(Complement(taEvenIntList), listA));
assert(!Accepts(Complement(taEvenIntList), listB));
assert(!Accepts(Complement(taEvenIntList), listC));
assert(Accepts(Complement(taEvenIntList), listD));
assert(!Accepts(Complement(taEvenIntList), listE));

// taMul3IntList accepts only lists of multiples of 3
assert(Accepts(Complement(taMul3IntList), listA));
assert(Accepts(Complement(taMul3IntList), listB));
assert(Accepts(Complement(taMul3IntList), listC));
assert(!Accepts(Complement(taMul3IntList), listD));
assert(!Accepts(Complement(taMul3IntList), listE));

// Intersection of taMul3IntList and taEvenIntList accepts only lists of multiples of 6
assert(Accepts(Complement(Intersect(taMul3IntList, taEvenIntList)), listA));
assert(Accepts(Complement(Intersect(taMul3IntList, taEvenIntList)), listB));
assert(Accepts(Complement(Intersect(taMul3IntList, taEvenIntList)), listC));
assert(Accepts(Complement(Intersect(taMul3IntList, taEvenIntList)), listD));
assert(!Accepts(Complement(Intersect(taMul3IntList, taEvenIntList)), listE));

